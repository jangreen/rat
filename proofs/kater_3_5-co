// coherence, part 3.5 in kater paper

let fr = [R];fr-typed;[W]

let eco = (co | rf | fr)+
let poloc = po & loc

// SC per location
let co1 = (poloc | rf | fr | co)+ & id
let co2 = po;eco & id

assume co2 <= 0
assume co^+ <= co // co transitive
assume co & id <= 0 // coherence irreflexive
assume po & id <= 0


assert co1 <= 0

