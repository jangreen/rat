"X86 TSO"
include "cos.cat"
include "fences.cat"
include "filters.cat"

let rfe = rf & ext
let coe = co & ext
//let fr = rfinv;co
//let fre = rfinv;coe
let fre = fr & ext
let po-loc = po & loc

(* All communication relations *)
let com = (co | fr | rf)

(* Uniproc *)
acyclic (po-loc | com) as uniproc

(* Atomic *)
empty rmw & (fre;coe)
let implied = po & W*R & ((M * A) | (A * M))

(* Communication relations for TSO *)
let com-tso = (co | fr | rfe)

(* Program order for TSO *)
let po-tso = ((po & ((R*M) | (W*W))) | mfence)

(* TSO global-happens-before *)
let ghb-tso = po-tso | com-tso

acyclic ghb-tso as tso
